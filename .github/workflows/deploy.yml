name: Deploy to Cloudflare Pages

on:
  push:
    branches:
      - main
      - staging
  pull_request:
    branches:
      - main

env:
  NODE_VERSION: '18'

jobs:
  # Build and Test Job
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run TypeScript type checking
      run: npm run typecheck

    - name: Run ESLint
      run: npm run lint

    - name: Run tests
      run: npm run test
      env:
        CI: true

    - name: Build application
      run: npm run build
      env:
        VITE_APP_NAME: 'ŸÖŸÜ ÿßŸÑŸÅŸÉÿ±ÿ© ÿ•ŸÑŸâ ÿßŸÑÿ≥ŸàŸÇ - Idea to Market'
        VITE_APP_URL: ${{ github.ref == 'refs/heads/main' && 'https://idea-to-market.sa' || 'https://staging.idea-to-market.sa' }}
        VITE_DEFAULT_LOCALE: 'ar-SA'
        VITE_SUPPORTED_LOCALES: 'ar-SA,en-US'
        VITE_DEFAULT_CURRENCY: 'SAR'

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-${{ github.sha }}
        path: dist/
        retention-days: 30

  # Deploy to Staging (staging branch)
  deploy-staging:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-${{ github.sha }}
        path: dist/

    - name: Deploy to Cloudflare Pages (Staging)
      uses: cloudflare/wrangler-action@v3
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        command: pages deploy dist --project-name=idea-to-market-saudi-staging --env=staging
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

    - name: Deploy Functions (Staging)
      uses: cloudflare/wrangler-action@v3
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        command: deploy --env=staging
        workingDirectory: './functions'
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

    - name: Run E2E Tests on Staging
      run: npx playwright test
      env:
        BASE_URL: https://staging.idea-to-market.sa

  # Deploy to Production (main branch)  
  deploy-production:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-${{ github.sha }}
        path: dist/

    - name: Deploy to Cloudflare Pages (Production)
      uses: cloudflare/wrangler-action@v3
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        command: pages deploy dist --project-name=idea-to-market-saudi --env=production
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

    - name: Deploy Functions (Production)
      uses: cloudflare/wrangler-action@v3
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        command: deploy --env=production
        workingDirectory: './functions'
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

    - name: Update Cloudflare DNS (if needed)
      run: |
        curl -X PUT "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/dns_records/${{ secrets.CLOUDFLARE_DNS_RECORD_ID }}" \
          -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
          -H "Content-Type: application/json" \
          --data '{"type":"CNAME","name":"idea-to-market.sa","content":"idea-to-market-saudi.pages.dev","ttl":1}'

    - name: Run E2E Tests on Production
      run: npx playwright test
      env:
        BASE_URL: https://idea-to-market.sa

    - name: Notify deployment success
      run: |
        curl -X POST \
          -H 'Content-Type: application/json' \
          -d '{
            "text": "‚úÖ Idea to Market Saudi deployed successfully to production!\nüåê URL: https://idea-to-market.sa\nüöÄ Commit: ${{ github.sha }}\nüë§ Author: ${{ github.actor }}"
          }' \
          ${{ secrets.SLACK_WEBHOOK_URL }}

  # Security Scan Job
  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Performance Audit Job
  lighthouse-audit:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    
    steps:
    - name: Lighthouse CI
      uses: treosh/lighthouse-ci-action@v9
      with:
        urls: |
          https://staging.idea-to-market.sa
          https://staging.idea-to-market.sa/ar
        configPath: './lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true